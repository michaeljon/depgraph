using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.XPath;
using CommandLine;

namespace depgraph
{
    class Program
    {
        static void Main(string[] args)
        {
            var result = Parser.Default.ParseArguments<ParserOptions>(args);

            var exitCode = result.MapResult(
                options =>
                {
                    if (options.ForEach == false)
                    {
                        var projects = LoadProjectInformation(options);
                        GenerateGraph(options, options.GraphFile, true, projects);
                    }
                    else
                    {
                        var projectFiles = Directory.EnumerateFiles(options.Path, "*.csproj", SearchOption.AllDirectories);
                        foreach (var projectFile in projectFiles)
                        {
                            var projectInformation = ParseProjectFile(options, projectFile);
                            var graphFile = Path.ChangeExtension(projectFile, ".dot");
                            GenerateGraph(options, graphFile, false, new List<ProjectInformation>() { projectInformation });
                        }
                    }

                    return 0;
                },
                errors =>
                {
                    errors.All(e =>
                    {
                        Console.Error.WriteLine(e);
                        return true;
                    });
                    return 1;
                }
            );

            Environment.Exit(exitCode);
        }

        static IList<ProjectInformation> LoadProjectInformation(ParserOptions options)
        {
            var projects = new List<ProjectInformation>();

            var projectFiles = Directory.EnumerateFiles(options.Path, "*.csproj", SearchOption.AllDirectories);

            foreach (var projectFile in projectFiles)
            {
                var projectInformation = ParseProjectFile(options, projectFile);

                projects.Add(projectInformation);
            }

            return projects;
        }

        static void GenerateGraph(ParserOptions options, string graphFile, bool generateThisNode, IList<ProjectInformation> projects)
        {
            var nextHue = 0;
            foreach (var project in projects)
            {
                project.RGB = GetHexFrom(ColorFromHue(GenerateHue(nextHue++), 1.0, 0.65));
            }

            var projectList = projects
                .Select(p => p.ProjectName)
                .Union(projects
                    .SelectMany(p => p.ProjectReferences)
                    .ToHashSet())
                .OrderBy(p => p);

            var packageList = projects
                .SelectMany(p => p.PackageReferences)
                .ToHashSet()
                .OrderBy(p => p.Name);

            using (var streamWriter = new StreamWriter(graphFile))
            {
                streamWriter.WriteLine("digraph std {");
                if (options.LeftRight == true)
                {
                    streamWriter.WriteLine("    rankdir=LR;");
                }
                streamWriter.WriteLine("    graph [ bgcolor=white, fontname=Arial, fontcolor=blue, fontsize=8 ];");
                streamWriter.WriteLine("    edge [ fontname=\"Fira Code\", fontcolor=red, fontsize=8, arrowsize=0.5 ];");

                streamWriter.WriteLine("    #");
                streamWriter.WriteLine($"    # This file was generated by depgen on {DateTime.UtcNow.ToString()}");
                streamWriter.WriteLine("    #");

                if (generateThisNode)
                {
                    streamWriter.WriteLine("    # this project");
                    streamWriter.WriteLine("    ");
                    streamWriter.WriteLine("    node [ fontname=\"Fira Code\", fontcolor=white, color=black, style=filled, fontsize=8, shape=oval ];");
                    streamWriter.WriteLine("    Solution");
                }

                if (options.IncludeProjects)
                {
                    streamWriter.WriteLine();
                    foreach (var project in projectList)
                    {
                        var p = projects
                            .First(pr => pr.ProjectName == project);
                        streamWriter.WriteLine($"    node [ fontname=\"Fira Code\", fontcolor=black, fontsize=8, color=\"#{p.RGB}\", shape=box, style=filled ];");
                        streamWriter.WriteLine($"    \"{project}\"");
                    }
                }

                if (options.IncludePackages)
                {
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("    node [ fontname=\"Fira Code\", fontcolor=black, color=\"#c0c0c0\" style=filled, fontsize=6, shape=oval ];");
                    foreach (var package in packageList)
                    {
                        var label = package.Name + "\\n" + package.Version;

                        streamWriter.WriteLine($"    \"{package.ToString()}\" [label=\"{label}\"]");
                    }
                }

                foreach (var project in projects)
                {
                    streamWriter.WriteLine();
                    streamWriter.WriteLine($"    # {project.ProjectName}");
                    streamWriter.WriteLine($"    edge [ color=\"#{project.RGB}\" ];");

                    if (generateThisNode)
                    {
                        streamWriter.WriteLine($"    Solution -> \"{project.ProjectName}\"");
                    }

                    if (options.IncludeProjects)
                    {
                        foreach (var reference in project.ProjectReferences)
                        {
                            streamWriter.WriteLine($"    \"{project.ProjectName}\" -> \"{reference}\"");
                        }
                    }

                    if (options.IncludePackages)
                    {
                        foreach (var reference in project.PackageReferences)
                        {
                            streamWriter.WriteLine($"    \"{project.ProjectName}\" -> \"{reference.ToString()}\"");
                        }
                    }
                }

                streamWriter.WriteLine("}");
            }

            return;
        }

        static ProjectInformation ParseProjectFile(ParserOptions options, string projectFile)
        {
            var projectInformation = new ProjectInformation(Path.GetFileNameWithoutExtension(projectFile));

            var document = XDocument.Load(projectFile);

            if (options.IncludeProjects)
            {
                LoadProjectReferences(document, projectInformation);
            }

            if (options.IncludePackages)
            {
                LoadPackageReferences(document, projectInformation);
            }

            return projectInformation;
        }

        static void LoadProjectReferences(XDocument document, ProjectInformation projectInformation)
        {
            var namespaceManager = new XmlNamespaceManager(new NameTable());
            namespaceManager.AddNamespace("x", "http://example.com");

            var references = document
                .XPathSelectElements("//*[local-name()='ProjectReference']", namespaceManager)
                .Select(r => r.Attribute("Include").Value)
                .ToList();

            foreach (var reference in references)
            {
                var slashPos = reference.LastIndexOf('\\');
                var fileName = reference.Substring(slashPos + 1);
                fileName = fileName.Replace(".csproj", "");

                projectInformation.ProjectReferences.Add(fileName);
            }
        }

        static void LoadPackageReferences(XDocument document, ProjectInformation projectInformation)
        {
            var namespaceManager = new XmlNamespaceManager(new NameTable());
            namespaceManager.AddNamespace("x", "http://example.com");

            var references = document
                .XPathSelectElements("//*[local-name()='PackageReference']", namespaceManager)
                .Select(r => new PackageInformation { Name = r.Attribute("Include").Value, Version = r.Attribute("Version").Value })
                .ToList();

            foreach (var reference in references)
            {
                projectInformation.PackageReferences.Add(reference);
            }
        }

        static double GenerateHue(int index)
        {
            var bitcount = 31;
            var rindex = 0;

            for (var i = 0; i < bitcount; i++)
            {
                rindex = (rindex << 1) | (index & 1);
                index >>= 1;
            }

            var hue = rindex / Math.Pow(2, bitcount);
            hue = (double)((hue + .6) % 1);
            return hue;
        }

        static int ColorFromHue(double hue, double saturation, double level)
        {
            var r = level;   // default to gray
            var g = level;
            var b = level;
            var v = (level <= 0.5) ? (level * (1.0 + saturation)) : (level + saturation - level * saturation);

            if (v > 0)
            {
                var m = level + level - v;
                var sv = (v - m) / v;
                hue *= 6.0;
                var sextant = (int)hue;
                var fract = hue - sextant;
                var vsf = v * sv * fract;
                var mid1 = m + vsf;
                var mid2 = v - vsf;

                switch (sextant)
                {
                    case 0:
                        r = v; g = mid1; b = m; break;

                    case 1:
                        r = mid2; g = v; b = m; break;

                    case 2:
                        r = m; g = v; b = mid1;break;

                    case 3:
                        r = m; g = mid2; b = v; break;

                    case 4:
                        r = mid1; g = m; b = v; break;

                    case 5:
                        r = v; g = m; b = mid2; break;
                }
            }

            return 255 << 24 | 
                Convert.ToByte(r * 255.0f) << 16 | 
                Convert.ToByte(g * 255.0f) << 8 | 
                Convert.ToByte(b * 255.0f);
        }

        public static string GetHexFrom(int color)
        {
            return color.ToString("X6").Substring(2);
        }
    }
}
